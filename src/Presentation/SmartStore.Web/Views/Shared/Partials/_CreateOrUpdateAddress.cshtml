@model AddressModel
@using SmartStore.Web.Models.Common;

@{ 
    var breakpoint = (ViewData["breakpoint"] as string).NullEmpty() ?? "md";
    var fieldPrefix = ViewData.TemplateInfo.HtmlFieldPrefix.NullEmpty() ?? "Address";
}

@Html.HiddenFor(model => model.Id)

    <div class="form-horizontal">

        @*@if (Model.CompanyEnabled)
        {
            @Html.ControlGroupFor(model => model.Company, required: Model.CompanyRequired, breakpoint: breakpoint)
        }*@

        <div><hr /></div>

        @*@if (Model.SalutationEnabled || Model.TitleEnabled)
        {
            <div class="form-group row">
                @if (Model.SalutationEnabled)
                {
                    @Html.LabelFor(model => model.Salutation, new { @class = "col-{0}-3 col-form-label".FormatInvariant(breakpoint) })
                    <div class="col-@breakpoint-3">
                        @Html.DropDownListFor(model => model.Salutation, Model.AvailableSalutations, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Salutation)
                    </div>
                }

                @if (Model.TitleEnabled)
                {
                    @Html.LabelFor(model => model.Title, new { @class = "col-{0}-3 col-form-label {1}".FormatInvariant(breakpoint, Model.SalutationEnabled ? " text-right" : "") })
                    <div class="col-@breakpoint-3">
                        @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Title)
                    </div>
                }
            </div>
        }*@

        <div class="form-group row">
            <label class="col-lg-3 col-form-label required" for="Address_FirstName">电话号码</label>
            <div class="col-lg-9">
                @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-3 col-form-label required" for="Address_FirstName">姓名</label>
            <div class="col-lg-9">
                @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
            </div>
        </div>

        @*@Html.ControlGroupFor(model => model.LastName, required: true, breakpoint: breakpoint)*@


        @*@if (Model.StreetAddress2Enabled)
        {
            @Html.ControlGroupFor(model => model.Address2, required: Model.StreetAddress2Required, breakpoint: breakpoint)
        }*@

        <div><hr /></div>


        @*<div class="form-group row">
            @Html.LabelFor(model => model.CountryId, new { @class = "col-{0}-3 col-form-label{1}".FormatInvariant(breakpoint, Model.CountryRequired ? " required" : "") })
            <div class="col-@breakpoint-9">
                @Html.DropDownList("CountryId", Model.AvailableCountries,
                new
                {
                    @class = "form-control country-input country-selector",
                    data_region_control_selector = "#{0}_StateProvinceId".FormatInvariant(fieldPrefix),
                    data_states_ajax_url = Url.Action("GetStatesByCountryId", "Country"),
                    data_addEmptyStateIfRequired = "true"
                })
                @Html.ValidationMessageFor(model => model.CountryId)
            </div>
        </div>*@

    <div class="form-group row">
        <label class="col-lg-3 col-form-label" for="Address_StateProvinceId">省份</label>
        @*@Html.LabelFor(model => model.StateProvinceId, new { @class = "col-{0}-3 col-form-label{1}".FormatInvariant(breakpoint, Model.StateProvinceRequired ? " required" : "") })*@
        <div class="col-lg-9">
            @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Company)
        </div>
    </div>
        <div class="form-group row">
            <label class="col-lg-3 col-form-label" for="Address_StateProvinceId">城市</label>
            @*@Html.LabelFor(model => model.City, new { @class = "col-{0}-3 col-form-label".FormatInvariant(breakpoint) + (Model.CityRequired ? " required" : "") })*@
                    <div class="col-lg-9">
                        @Html.TextBoxFor(model => model.City, new { placeholder = Model.CityRequired ? "" : T("Common.Optional").Text, @class = "form-control" })
                    </div>
                @Html.ValidationMessageFor(model => model.City)
                @*@Html.ValidationMessageFor(model => model.ZipPostalCode)*@
        </div>
        <div class="form-group row">
            <label class="col-lg-3 col-form-label required" for="Address_Address1">详细地址</label>
            <div class="col-lg-9">
                @Html.TextBoxFor(model => model.Address1, new { @class = "form-control" })
                <span class="field-validation-valid" data-valmsg-for="Address.Address1" data-valmsg-replace="true"></span>
            </div>
        </div>


        <div><hr /></div>

        @*@Html.ControlGroupFor(model => model.Email, required: true, breakpoint: breakpoint)*@

        @*@if (Model.ValidateEmailAddress)
        {
            @Html.ControlGroupFor(model => model.EmailMatch, required: true, breakpoint: breakpoint)
        }*@

        @*@if (Model.FaxEnabled)
        {
            @Html.ControlGroupFor(model => model.FaxNumber, required: Model.FaxRequired, breakpoint: breakpoint)
        }*@

        <div class="form-group row">
            <div class="offset-@breakpoint-3 col-@breakpoint-9 text-muted address-required-hint">
                @T("Common.FormFields.Required.Hint")
            </div>
        </div>

    </div>
