@model OrderListModel
@using Telerik.Web.Mvc.UI
@{
	var hideProfitReport = false;
	var allString = T("Admin.Common.All").Text;
	ViewBag.Title = T("报单订单").Text;
}

@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <i class="far fa-chart-bar"></i>
            @T("报单订单审核")
        </div>
        <div class="options d-flex">
			@{ Html.RenderWidget("admin_button_toolbar_before"); }

			@*<div class="input-group d-inline-flex mr-3" style="width: 400px">
				@Html.TextBoxFor(model => Model.GoDirectlyToNumber, new { @class = "form-control", placeholder = T("按订单编号查找") })
				<div class="input-group-append">
					<button type="submit" class="btn btn-secondary" id="go-to-order-by-number" name="go-to-order-by-number" value="go-to-order-by-number" title="@T("Admin.Orders.List.GoDirectlyToNumber.Hint")">
						<i class="fa fa-search"></i>
					</button>
					<button type="button" class="btn btn-outline-secondary btn-toggle-filter" data-toggle="button" aria-pressed="false">
						<i class="fa fa-filter"></i>
						<span>@T("Common.Filter")</span>
						<i class="fa fa-angle-double-down"></i>
					</button>
				</div>
			</div>*@	

			@{ Html.RenderWidget("admin_button_toolbar_after"); }
        </div>
    </div>

    <div class="row mt-3 grid-filter" style="display: none">
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.StartDate)
            @Html.EditorFor(model => Model.StartDate)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.EndDate)
            @Html.EditorFor(model => Model.EndDate)
        </div>


        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.OrderNumber)
            @Html.EditorFor(model => Model.OrderNumber)
        </div>



        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @*@Html.SmartLabelFor(model => model.PaymentStatusIds)*@
            @Html.Label("订单审核状态")
            @Html.DropDownList("PaymentStatusIds", Model.AvailablePaymentStatuses, null, new { multiple = "multiple", @class = "form-control" })
        </div>
        @*<div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.OrderNumber)
            @Html.Label("姓名")
            @Html.EditorFor(model => Model.CustomerName)
        </div>*@
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.Label("手机")
            @Html.EditorFor(model => Model.CustomerEmail)
        </div>
        @*<div class="col-xl-3"></div>*@

        <div class="col-sm-6 col-lg-4 col-xl-3 form-group ml-auto">
            @Html.SmartLabel(string.Empty, string.Empty)
            <button type="submit" id="btnSearch" class="btn btn-warning btn-block">
                <span>@T("搜索")</span>
            </button>
        </div>
    </div>

    <div>
        @(Html.Telerik().Grid<OrderModel>()
            .Name("orders-grid")
            .TableHtmlAttributes(new { @class = "multiline-grid" })
            .ClientEvents(events => events
                .OnDataBinding("onDataBinding")
                .OnDataBound("onDataBound")
                .OnComplete("onComplete"))
            .Columns(columns =>
            {
                columns.Bound(x => x.Id)
                    .ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' class='checkboxGroups'/>")
                    .Title("<input id='mastercheckbox' type='checkbox'/>")
                    .Width(50)
                    .HtmlAttributes(new { style = "text-align:center" })
                    .HeaderHtmlAttributes(new { style = "text-align:center" });
                columns.Bound(x => x.OrderNumber)
                    .Width(150)
                    .Title(T("订单编号"))
                    .ClientTemplate("<#= OrderNumber #>");
                columns.Bound(x => x.RedeemedRewardPoints)
                  .Title(T("所在层数"))
                  .ClientTemplate(
                      "<div><#= RedeemedRewardPoints #></div>");
                columns.Bound(x => x.CustomerEmail)
                   .Title(T("客户姓名"))
                   .ClientTemplate(
                       "<div><#= CustomerEmail #></div>");
                columns.Bound(x => x.CustomerName)
                   .Title(T("昵称"))
                   .ClientTemplate(
                       "<div><#= CustomerName #></div>");
                columns.Bound(x => x.CustomerMobile)
                   .Title(T("手机号"))
                   .ClientTemplate(
                       "<div><#= CustomerMobile #></div>");
                columns.Bound(x => x.CreatedOn)
                    .Width(200)
                    .Title(T("订单创建时间"))
                    .ClientTemplate(
                        "<div><#= CreatedOnString #></div>" );
                columns.Bound(x => x.UpdatedOn)
                    .Width(200)
                    .Title(T("订单付款时间"))
                    .ClientTemplate(
                        "<div><#= CreatedOnString #></div>");
                columns.Bound(x => x.StatusPayment)
                    .Width(100)
                    .Title(T("订单审核状态"))
                    .ClientTemplate("<span class='<#= OrderStatusLabelClass #>'><#= OrderStatus #></span>");
                columns.Bound(x => x.OrderTotal)
                    .Width(200)
                    .RightAlign()
                    .ClientTemplate(
                        "<div class='pr-2'><big style='font-weight:600'><#= OrderTotal #></big> <i class='<#= PaymentStatusLabelClass #>' title='<#= PaymentStatus #>'></i></div>" +
                        "");

                columns.Bound(x => x.Id)
                     .Width(200)
                     .RightAlign()
                     //.Hidden(x=>x.OrderStatus > 10)
                     .ClientTemplate(
                    "<# if(StatusPayment==10){ #><a  class=\"t-button\" href='/Admin/DeclarationFinaduit/Audit/<#= Id #>'><i class='fa fa-check'></i>处理</a><# } #>"+
                    "<# if(StatusPayment==30){ #><a  class=\"t-button\" href='/Admin/DeclarationFinaduit/View/<#= Id #>'><i class='fa fa-check'></i>分润</a><# } #>"
                    //+
                    //"<a  class=\"t-button\" href='/Admin/DeclarationFinaduit/Audit/<#= Id #>'><i class='fa fa-check'></i>审核</a>" + "&nbsp;"
                    //"<a class=\"t-button\" href='/Admin/DeclarationFinaduit/Deny/<#= Id #>'><i class='fa fa-times'></i>驳回</a>" + "&nbsp;" +
                    //"<a class=\"t-button\" href='/Admin/DeclarationFinaduit/View/<#= Id #>'><i class='fa fa-eye'></i>查看</a>"
                    ).Title("操作");

            })
            .Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Bottom))
            .DataBinding(dataBinding => dataBinding.Ajax().Select("OrderList", "DeclarationFinaduit"))
            .PreserveGridState()
            .EnableCustomBinding(true))
    </div>
              
    <script type="text/javascript">
		var selectedIds = [];
		var reportAggregates = "";

		$(document).ready(function () {

			$('.btn-toggle-filter').on('click', function (e) {
				$('.grid-filter').slideToggle({ duration: 200, easing: 'ease-in-out' });
			});

			//search button
			$('#btnSearch').click(function () {
				//search
				var grid = $('#orders-grid').data('tGrid');
				grid.currentPage = 1; //new search. Set page size to 1
				grid.ajaxRequest();
				//clear selected checkboxes
				$('.checkboxGroups').attr('checked', false).change();
				selectedIds = [];
				return false;
			});


			$('#mastercheckbox').click(function () {
				$('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
			});

			//wire up checkboxes.
			$(document).on('change', '#orders-grid input[type=checkbox][id!=mastercheckbox]', function (e) {
				var $check = $(this);
				if ($check.is(":checked") == true) {
					var checked = jQuery.inArray($check.val(), selectedIds);
					if (checked == -1) {
						//add id to selectedIds.
						selectedIds.push($check.val());
					}
				}
				else {
					var checked = jQuery.inArray($check.val(), selectedIds);
					if (checked > -1) {
						//remove id from selectedIds.
						selectedIds = $.grep(selectedIds, function (item, index) {
							return item != $check.val();
						});
					}
				}
				updateMasterCheckbox();
			});
		});

		function onDataBinding(e) {
			var searchModel = {
				StartDate: $('#@Html.FieldIdFor(model => model.StartDate)').val(),
				EndDate: $('#@Html.FieldIdFor(model => model.EndDate)').val(),
				OrderStatusIds: jQuery.makeArray($('#@Html.FieldIdFor(model => model.OrderStatusIds)').val()).join(),
				PaymentStatusIds: jQuery.makeArray($('#@Html.FieldIdFor(model => model.PaymentStatusIds)').val()).join(),
                OrderNumber: $('#@Html.FieldIdFor(model => model.OrderNumber)').val(),
                PaymentMethods: jQuery.makeArray($('#@Html.FieldIdFor(model => model.PaymentMethods)').val()).join(),
                CustomerEmail: jQuery.makeArray($('#@Html.FieldIdFor(model => model.CustomerEmail)').val()).join(),
                CustomerName: jQuery.makeArray($('#@Html.FieldIdFor(model => model.CustomerName)').val()).join(),
			};
			e.data = searchModel;
		}

		function onDataBound(e) {

			$('#orders-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
				var currentId = $(this).val();
				var checked = jQuery.inArray(currentId, selectedIds);
				//set checked based on if current checkbox's value is in selectedIds.
				$(this).attr('checked', checked > -1);
			});

			updateMasterCheckbox();

		}

		function onComplete(e) {
			var result = e.response;
			if (result) {
				reportAggregates = e.response["aggregates"];
			}
		}

		function updateMasterCheckbox() {
			var numChkBoxes = $('#orders-grid input[type=checkbox][id!=mastercheckbox]').length;
			var numChkBoxesChecked = $('#orders-grid input[type=checkbox][checked][id!=mastercheckbox]').length;
			$('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
		}
    </script>   
}