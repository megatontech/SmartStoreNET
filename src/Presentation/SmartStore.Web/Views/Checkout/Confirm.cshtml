@model CheckoutConfirmModel

@using SmartStore.Web.Models.Checkout;
@using SmartStore.Core.Domain.Orders;

@{
    Layout = "_Checkout";
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    Html.AddBodyCssClass("no-offcanvas-cart");

    var termsLinkTemplate = "<a class='terms-trigger read' href='{0}' data-toggle='modal' data-target='#terms-of-service-modal'>";
    var termsLink = termsLinkTemplate.FormatInvariant(Url.Topic("conditionsofuse", true));
    var disclaimerLink = termsLinkTemplate.FormatInvariant(Url.Topic("disclaimer", true));
    var privacyLink = termsLinkTemplate.FormatInvariant(Url.Topic("privacyinfo", true));
    var terms = string.Format(T("Checkout.TermsOfService.IAccept"), termsLink, "</a>", disclaimerLink, privacyLink);

    var consentZoneContent = Html.Widget("checkout_submit_data_consent", false).ToHtmlString();
    var consentZoneHasValue = consentZoneContent.HasValue();
    var param = ViewBag.wxJsApiParam;
    ViewBag.PageTitle = T("订单支付").Text;
}

@section orderProgress{
    @{ Html.RenderAction("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Payment }); }
    
}

<div class="page checkout-confirm-page">
    <div class="page-title">
        <h1 class="h3">@T("Checkout.ConfirmYourOrder")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "confirm-order-form" }))
        {
            Html.RenderWidget("checkout_confirm_top");

            <p class="page-intro lead">
                @Html.Raw(@T("Checkout.ConfirmHint"))
            </p>

            <input type="hidden" id="customercommenthidden" name="customercommenthidden" />
            //实际订单总价
            <input type="hidden" id="RealOrderTotalVal" name="RealOrderTotalVal" value="0" />
            //实际支付
            <input type="hidden" id="OrderTotalVal" name="OrderTotalVal" value="0" />
            <input type="hidden" id="UsePointsTotalVal" name="UsePointsTotalVal" value="0" />
            <input type="hidden" id="UseDiscountVal" name="UseDiscountVal" value="0" />

            <div id="confirm-warnings" class="confirm-order">
                @if (Model.Warnings.Any())
                {
                    <div class="alert alert-danger mb-3">
                        <ul>
                            @foreach (var warning in Model.Warnings)
                            {
                                <li>@Html.Raw(warning)</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }

        @{ Html.RenderWidget("checkout_confirm_before_summary"); }

        <div class="order-summary-body mb-4">
            @{ Html.RenderAction("OrderSummary", "ShoppingCart", new { prepareAndDisplayOrderReviewData = true }); }
        </div>

        @if (Model.MinOrderTotalWarning.HasValue())
        {
            <div class="alert alert-danger">
                @Model.MinOrderTotalWarning
            </div>
        }

        <div class="cart-buttons my-4 row">
            @*<div class="col-sm-6 col-lg-4 order-last order-sm-first mt-3 mt-sm-0">
                <a class="btn btn-secondary btn-lg btn-block" href="@Url.Action("PaymentMethod")">
                    <i class="fa fa-angle-left mr-3"></i>
                    <span>@T("Common.Back")</span>
                </a>
            </div>*@

            @if (!Model.MinOrderTotalWarning.HasValue())
            {
                <div class="col-sm-6 col-lg-4 ml-lg-auto">
                    <button class="btn btn-danger btn-lg btn-block btn-buy hide" id="confirmbtn" style="display: none; width: 100%; background-color: #FF5502; border-radius: 1em; " onclick="return false;">
                        <span>@T("Checkout.ConfirmButton")</span>
                        <i class="fa fa-angle-right ml-3"></i>
                    </button>
                    <button class="btn btn-danger btn-lg btn-block btn-pay" style="width: 100%; background-color: #FF5502; border-radius: 1em; " id="pay" onclick="return false;">
                        <span>@T("支付")</span>
                        <i class="fa fa-angle-right ml-3"></i>
                    </button>
                    @*<button class="btn btn-danger btn-lg btn-block btn-pay" style="        width: 100%;
                            background-color: #FF5502;
                            border-radius: 1em;
                    " id="paycode" onclick="return false;">
                                        <span>@T("微信支付")</span>
                                        <i class="fa fa-angle-right ml-3"></i>
                                    </button>*@
                </div>
            }
        </div>

        @{ Html.RenderWidget("checkout_confirm_bottom"); }
    </div>
</div>

@if (!Model.MinOrderTotalWarning.HasValue())
{
    <script>
        $(function () {
            var buyButton = $(".btn-buy");

            function setBuyButtonState(disable) {
                buyButton.prop('disabled', disable);
                buyButton.find('.fa')
                    .removeClass('fa-angle-right fa-spinner fa-spin')
                    .addClass(disable ? 'fa-spinner fa-spin' : 'fa-angle-right');
            }

            function processBuyButtonClick(customerAgreed, showThrobber) {
                var termOfServiceOk = true,
                    userAgreementsOk = true,
                    esdRevocationWaiverOk = true,
                    cartItems = $('#cart-items');

                if (_.isTrue(customerAgreed)) {
                    // Reverse apply. We do that just to indicate that no entered data is lost.
                    $("#CustomerComment").val($("#customercommenthidden").val());
                }
                else {
                    $("#customercommenthidden").val($("#CustomerComment").val());
                }

				// Terms of services.
                @if (Model.TermsOfServiceEnabled)
                {
					<text>
                    if (!$('#termsofservice').is(':checked')) {
                        displayNotification(@T("Checkout.TermsOfService.PleaseAccept").JsText, "error");
                        termOfServiceOk = false;
                        $.scrollTo($('#termsofservice'), 800, { offset: -70 });
                    }
                    else {
                        termOfServiceOk = true;
                    }
					</text>
                }

                // Agree user agreement for downloadable products.
                cartItems.find('input[name^=AgreeUserAgreement]').each(function () {
                    if (_.isTrue(customerAgreed)) {
                        $(this).prop('checked', true);
                    }
                    else if (!$(this).is(':checked')) {
                        userAgreementsOk = false;
                        displayNotification('@T("Checkout.DownloadUserAgreement.PleaseAgree").ToString().EncodeJsString('"', false)', 'error');
                        if (termOfServiceOk) {
                            $.scrollTo(cartItems, 800, { offset: -20 });
                        }
                        return false;
                    }
                });

                // Agree ESD revocation waiver.
				@if(Model.ShowEsdRevocationWaiverBox)
				{
					<text>
                    cartItems.find('input[name^=AgreeEsdRevocationWaiver]').each(function () {
                        if (_.isTrue(customerAgreed)) {
                            $(this).prop('checked', true);
                        }
                        else if (!$(this).is(':checked')) {
                            esdRevocationWaiverOk = false;
                            displayNotification('@T("Checkout.EsdRevocationWaiverConfirmation.PleaseAgree").ToString().EncodeJsString('"', false)', 'error');
                            if (termOfServiceOk) {
                            	$.scrollTo(cartItems, 800, { offset: -20 });
                            }
                            return false;
                        }
                    });
                    </text>
				}

                if (termOfServiceOk && userAgreementsOk && esdRevocationWaiverOk) {
                    var submitOrderEvent = jQuery.Event('submitOrder');
                    submitOrderEvent.isOrderValid = true;
                    submitOrderEvent.isMobile = false;
                    submitOrderEvent.disableBuyButton = false;

                    $(document).trigger(submitOrderEvent);

                    if (true === submitOrderEvent.isOrderValid) {
                        try {
                            setBuyButtonState(true);

                            if (_.isTrue(showThrobber)) {
                                $.throbber.show({ white: true, small: false, speed: 0, message: '@T("Checkout.OrderCompletes").ToString().EncodeJsString('"', false)' });
                            }
                        }
                        catch (e) { }

                        $('#confirm-order-form').submit();
                    }
                    else if (true === submitOrderEvent.disableBuyButton) {
                        setBuyButtonState(true);
                    }
                }
            }

            // Buy button has been clicked.
            buyButton.on("click", function () {
                processBuyButtonClick(false);
            });

            // Simulate buy button click.
            $(document).on('clickBuyButton', function (e) {
                processBuyButtonClick(e.customerAgreed, e.showThrobber);
            });

            // Report error.
            $(document).on('reportError', function (e) {
                if (!_.isEmpty(e.message)) {
                    var str = '<div class="alert alert-danger mb-3"><ul>';
                    if (_.isArray(e.message)) {
                        $.each(e.message, function (index, value) {
                            str += '<li>' + value + '</li>';
                        });
                    }
                    else {
                        str += '<li>' + e.message + '</li>';
                    }
                    str += '</ul></div>';

                    var warnings = $('#confirm-warnings');
                    warnings.html(str);

                    try {
                        setBuyButtonState(false);
                        $.throbber.hide(true);
                        $.scrollTo(warnings, 800, { offset: -20 });
                    }
                    catch (e) { }
                }
            });
        });
    </script>
}
<div class="" style="height:30px;">
</div>
<div class="" style="height:30px;">
</div>
<script>
    var payjson = "";
    $("paycode").click(function () {
        GetNewCode();
    });
    function getQueryString(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg);
        if (r != null) return unescape(r[2]); return null;
    }
    $(function () {
        var codetest = getQueryString("code");
        if (!codetest || codetest.length <= 0) {
            GetNewCode();
        }
    }
    );
    var code = getQueryString("code");
    $("#pay").click(function () {
        $("#pay").hide();
        $.ajax({
                cache:false,
                type: "POST",
            url: "@(Url.Action("InitPay", "Checkout"))",
            data: { "total_fee": (parseFloat($("#OrderTotalVal").val()) * 100), "code": code, "productname": @DateTime.Now.Ticks.ToString() },
            success: function (data) {
                payjson = data;
                console.log(data);
                jsApiCall();
                },
            error: function (xhr, ajaxOptions, thrownError) {
                $("#pay").show();
                GetNewCode();
				},
				complete: function () {
					$('#addrecord-window').modal('hide');
				}
            });
    });
    //调用微信JS api 支付
    function jsApiCall() {
        var jsonObj = $.parseJSON(payjson);
        WeixinJSBridge.invoke(
            'getBrandWCPayRequest',
            jsonObj,//josn串
            function (res) {
                WeixinJSBridge.log(res.err_msg);
                //alert(res.err_code + res.err_desc + res.err_msg);
                if (res.err_msg == "get_brand_wcpay_request:ok") {
                    // 使用以上方式判断前端返回,微信团队郑重提示：
                    //res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。
                    $("#confirmbtn").show();
                    $("#confirmbtn").click();
                } else
                {
                    GetNewCode();
                    $("#pay").show();
                }
            }
        );
    }
    function GetNewCode()
    {
        window.location.href = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx8953723b60205284&redirect_uri=http://www.michat520.cn/Checkout/Confirm&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect';
    }
    //function callpay() {
    //    if (typeof WeixinJSBridge == "undefined") {
    //        if (document.addEventListener) {
    //            document.addEventListener('WeixinJSBridgeReady', jsApiCall, false);
    //        }
    //        else if (document.attachEvent) {
    //            document.attachEvent('WeixinJSBridgeReady', jsApiCall);
    //            document.attachEvent('onWeixinJSBridgeReady', jsApiCall);
    //        }
    //    }
    //    else {
    //        jsApiCall();
    //    }
    //}
    //function onBridgeReady() {
    //    WeixinJSBridge.invoke(
    //        'getBrandWCPayRequest', {
    //        "appId": "wx2421b1c4370ec43b",     //公众号名称，由商户传入
    //            "timeStamp": new Date().valueOf(),         //时间戳，自1970年以来的秒数
    //        "nonceStr": "e61463f8efa94090b1f366cccfbbb444", //随机串
    //        "package": "prepay_id=u802345jgfjsdfgsdg888",
    //        "signType": "MD5",         //微信签名方式：
    //        "paySign": "70EA570631E4BB79628FBCA90534C63FF7FADD89" //微信签名
    //    },
    //        function (res) {
    //            if (res.err_msg == "get_brand_wcpay_request:ok") {
    //                // 使用以上方式判断前端返回,微信团队郑重提示：
    //                //res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。
    //            }
    //        });
    //}
    //if (typeof WeixinJSBridge == "undefined") {
    //    if (document.addEventListener) {
    //        document.addEventListener('WeixinJSBridgeReady', onBridgeReady, false);
    //    } else if (document.attachEvent) {
    //        document.attachEvent('WeixinJSBridgeReady', onBridgeReady);
    //        document.attachEvent('onWeixinJSBridgeReady', onBridgeReady);
    //    }
    //} else {
    //    onBridgeReady();
    //}
</script>